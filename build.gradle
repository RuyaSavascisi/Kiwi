plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'maven-publish'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.minecraft_version + "-Fabric-" + project.mod_version
group = project.maven_group
var realVersion = project.mod_version + '+fabric'

repositories {
    maven { url "https://maven.parchmentmc.org" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://api.modrinth.com/maven" }
    maven { url "https://maven.blamejared.com/" }
    maven { url "https://jitpack.io" } // Fabric ASM, Mixin Extras
}

sourceSets {
    main.resources.srcDirs += "$rootDir/src/generated/resources"
    main.java.srcDirs += "$rootDir/annotation/src/main/java"
    main.resources.srcDirs += "$rootDir/annotation-processor/src/main/resources"
    main.java.srcDirs += "$rootDir/annotation-processor/src/main/java"
}

loom {
    accessWidenerPath = file("src/main/resources/kiwi.accesswidener")
    enableTransitiveAccessWideners = false
    mixin {
        defaultRefmapName = "${project.mod_id}.refmap.json"
    }
    runs {
        //
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        //
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            runDir "build/datagen"
        }
    }
}

configurations {
    shadowCommon
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.4.0"))

    implementation "com.google.code.findbugs:jsr305:3.0.2"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

    modImplementation "dev.architectury:architectury-fabric:${project.architectury_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

    modCompileOnlyApi "mezz.jei:jei-1.20.1-common-api:${project.jei_version}"
    modCompileOnlyApi "mezz.jei:jei-1.20.1-fabric-api:${project.jei_version}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modImplementation "maven.modrinth:jade:11.10.0+fabric"
    //modImplementation "maven.modrinth:fabric-screen-layers:1.0.1+1.20"

    implementation shadowCommon("org.yaml:snakeyaml:${project.snakeyaml_version}")
    implementation shadowCommon("com.ezylang:EvalEx:${project.evalex_version}")

    annotationProcessor project(':annotation-processor')
}

processResources {
    inputs.property "version", realVersion

    filesMatching("fabric.mod.json") {
        expand "version": realVersion
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    // withSourcesJar()
}

def a = [
        "/assets/kiwi/lang/en_us.existing.yaml",
        "/assets/kiwi/blockstates",
        "/assets/kiwi/models",
        "/assets/kaleidos",
        "/assets/kswitch",
        "/snownee/kiwi/test",
        "/data",
        "/.cache",
        "/third_party"
]

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude(a)
    relocate "org.yaml.snakeyaml", "${project.group}.shadowed.org.yaml.snakeyaml"
    relocate "com.ezylang.evalex", "${project.group}.shadowed.com.ezylang.evalex"
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set('shadow')
}

remapJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn(shadowJar)
    input.set(shadowJar.archiveFile)
    archiveClassifier = ""

    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

unifiedPublishing {
    project {
        displayName = "[Fabric $project.supported_version] $project.mod_version"
        version = realVersion // Optional, Inferred from project by default
        changelog = file("CHANGELOG.md").exists() ? file("CHANGELOG.md").text : "" // Optional, in markdown format
        releaseType = project.release_type // Optional, use "release", "beta" or "alpha"
        gameVersions = ["1.20", "1.20.1"]
        gameLoaders = ["fabric", "quilt"]

        mainPublication tasks.remapJar // Declares the publicated jar

        if (System.getenv("CURSE_TOKEN") != null) {
            curseforge {
                token = System.getenv("CURSE_TOKEN")
                id = "549404" // Required, must be a string, ID of CurseForge project

                relations { // Optional, Inferred from the relations above by default
                    depends "fabric-api"
                    optional "cloth-config"
                }
            }
        }

        if (System.getenv("MODRINTH_TOKEN") != null) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = "ufdDoWPd" // Required, must be a string, ID of Modrinth project

                relations { // Optional, Inferred from the relations above by default
                    depends "fabric-api"
                    optional "cloth-config"
                }
            }
        }
    }
}
